@node Generic dispatch
@chapter Generic dispatch

@section Call history

Each generic function contains a @emph{call history}.  The call
history is a simple list of @emph{call history entries}.  A call
history entry associates a list of classes (those of the classes of
the required arguments to the generic function) with a @emph{list of
  applicable methods} and an @emph{effective method}.

As permitted by the AMOP, when the generic function is invoked, its
discriminating function first consults the call history (though, for
performance reasons, not directly) in order to see whether an existing
effective method can be reused, and if so, it invokes it on the
arguments received.

If the call history does not contain an entry corresponding to the
classes of the required arguments, as required by the AMOP, the
discriminating function then first calls
@code{compute-applicable-methods-using-classes}, passing it the
classes of the required arguments.  If the second value returned by
that call is @emph{true}, then the effective method is computed by
calling the generic function named @code{compute-effective-method}.
The resulting effective method is combined with the classes of the
arguments, and the list of applicable methods into a call history
entry which is added to the call history, and the effective method is
invoked on the arguments received.  If the second value returned by
the call is @emph{false}, then the discriminating function calls
@code{compute-applicable-methods} with the list of the arguments
received, and then the effective method is computed by calling
@code{compute-effective-method} and finally invoked.

When a method is added to the generic function, the call history is
traversed to see whether there exists a call history entry such that
the new method would be applicable to arguments with the classes of
the entry.  If so, the entry is removed.  If any entry was removed, a
new discriminating function is computed and installed. 

When a method is removed from the generic function, the call history
is traversed to see whether there exists a call history entry such
that the method to be removed is in the list of applicable methods
associated with the entry.  If so, the entry is removed. If any entry
was removed, a new discriminating function is computed and installed.

When a class metaobject is reinitialized, that class metaobject and
all of its subclasses are traversed.  For each class metaobject
traversed, @code{specializer-direct-methods} is called to determine
which methods contain that class as a specializer.  By definition, any
such method will be associated with a generic function.  The call
history of that generic function is traversed to determine whether
there is an entry containing that method, and if so, the entry is
removed from the call history.  The AMOP allows the implementation to
keep the entry if the @emph{precedence list} of the class does not
change as a result of being reinitialized, but for reasons explained
below, we remove the entry independently of whether this is the case.
If an entry was removed, a new discriminating function is computed and
installed.
